name: Deploy to Kubernetes

on:
  push:
    branches:
      - main  # Or the branch you want to trigger this action on

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      

      # Extract Git SHA (unique version for tagging)c
      - name: Get Git SHA
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      
        
      # ðŸ”¹ Update the deployment file with the correct Git SHA
      - name: Update Kubernetes Deployment YAML with Git SHA
        run: |
          sed -i "s|\${GITHUB_SHA}|$GIT_SHA|g" k8s_manifests/Client/frontend-deployment.yaml
          cat k8s_manifests/Client/frontend-deployment.yaml  # Debugging: Print the file content
          
          sed -i "s|\${GITHUB_SHA}|$GIT_SHA|g" k8s_manifests/Server/backend-deployment.yaml

          
          cat k8s_manifests/Server/backend-deployment.yaml  # Debugging: Print the file content

        
     
      # Set up AWS CLI and configure it with the AWS Access Key ID and Secret Access Key
      - name: Set up AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region eu-north-1
          aws sts get-caller-identity


      # Set up Docker Buildx for building images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Log into Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 440744253012.dkr.ecr.eu-north-1.amazonaws.com
        

      # Build the Docker image and push to ECR
      - name: Build and Push Docker image to ECR
        run: |
          docker build -t 440744253012.dkr.ecr.eu-north-1.amazonaws.com/copenhageneats-frontend:$GIT_SHA ./Client
          docker push 440744253012.dkr.ecr.eu-north-1.amazonaws.com/copenhageneats-frontend:$GIT_SHA 
 
          docker build -t 440744253012.dkr.ecr.eu-north-1.amazonaws.com/copenhageneats-backend:$GIT_SHA ./Server
          docker push 440744253012.dkr.ecr.eu-north-1.amazonaws.com/copenhageneats-backend:$GIT_SHA 
          

      # Set up Kubeconfig for kubectl using the base64 Kubeconfig secret
      - name: Set up Kubeconfig
        run: |
          echo "Checking if .kube directory exists"
          ls -la $HOME  # Check the contents of the home directory
          mkdir -p $HOME/.kube  # Create the .kube directory if it doesn't exist
          echo "Directory check completed"
          ls -la $HOME/.kube  # Confirm that .kube directory exists after creation
          echo "Decoding Kubeconfig from secrets"
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > $HOME/.kube/config  # Decode and save the Kubeconfig
          echo "Kubeconfig setup completed"

      # Deploy the frontend to Kubernetes
      - name: Deploy frontend to Kubernetes
        run: |
          kubectl apply -f k8s_manifests/Client/frontend-deployment.yaml
          kubectl apply -f k8s_manifests/Server/backend-deployment.yaml

      # Apply the Ingress resource (ALB setup for your frontend and backend)
      - name: Apply Ingress for load balancing
        run: |
          kubectl apply -f k8s_manifests/full_stack_lb.yaml

      # Wait for the frontend pod to be ready
      - name: Wait for frontend pod
        run: |
          kubectl rollout status deployment/frontend -n workshop